stat_smooth(method = "lm", se = FALSE)
### Supporting code.
ggplot(mlb, aes(x = wins, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(mlb, aes(x = strikeouts, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(mlb, aes(x = bat_avg, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(mlb, aes(x = hits, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE)
## Numerical and visual summaries
model <- lm(runs ~ strikeouts, data = mlb)
summary(model)
ggplot(mlb, aes(x = strikeouts, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs) #if you are unable to load oilabs, replace this line with the line that sources
#the custom function
source("https://anna-neufeld.github.io/Stat311/oiLabs/Week10/plot_ss.R")
library(ggplot2)
mlb <- read.csv("https://anna-neufeld.github.io/Stat311/oiLabs/Week10/mlb11.csv")
plot_ss(x = at_bats, y = runs, data = mlb, showSquares = TRUE)
plot_ss(x = at_bats, y = runs, data = mlb, showSquares = TRUE)
plot_ss(x = at_bats, y = runs, data = mlb, showSquares = TRUE)
plot_ss(x = at_bats, y = runs, data = mlb, showSquares = TRUE)
## compute
556-628.7005
### Supporting code.
ggplot(mlb, aes(x = wins, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(mlb, aes(x = strikeouts, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(mlb, aes(x = bat_avg, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(mlb, aes(x = hits, y = runs))+ geom_point() +
stat_smooth(method = "lm", se = FALSE)
model1 <- lm(runs ~ wins, data = mlb)
summary(model1)
model2 <- lm(runs ~ strikeouts, data = mlb)
summary(model2)
model3 <- lm(runs ~ bat_avg, data = mlb)
summary(model3)
model4 <- lm(runs ~ hits, data = mlb)
summary(model4)
### Supporting code.
model1 <- lm(runs ~ wins, data = mlb)
summary(model1)
model2 <- lm(runs ~ strikeouts, data = mlb)
summary(model2)
model3 <- lm(runs ~ bat_avg, data = mlb)
summary(model3)
model4 <- lm(runs ~ hits, data = mlb)
summary(model4)
knitr::opts_chunk$set(echo = TRUE)
QEpoints <- c(19/19, 23/23) # Enter a vector of two or three elements here: two elements if you opt not to attempt the final, or three elements if you do attempt it. Each element needs to be expressed as a proportion of points earned out of all points attempted on a given assignment. Do not enter a score for the final if you do not attempt it. Example: if you earned 17 points on the first quiz and 20 on the second quiz but do not attempt the final, enter c(17/19, 20/23)
percent_QE <- "empty"
if(length(QEpoints)==2) percent_QE <- 60*sum(QEpoints)/2
if(length(QEpoints)==3) percent_QE <- 60*(sum(QEpoints[1:2])+2*QEpoints[3])/4
percent_QE
HWpoints <- c(5/5, 5/5, 4.85/4.85) # Enter a vector of five or six elements here: Five elements if you opt not to attempt the sixth, or six elements if you do attempt it.  Each element needs to be expressed as a proportion of points earned out of all points attempted on a given assignment. If you received a 0 on any of the first five assignments, enter this score as a 0; do not omit it.  Do not enter a score for the final if you do not attempt it. Example: if you earned 3.25, 4, 5, 4.5, 0, and 5 points on six homework assignments, enter c(3.25/5, 4/5, 5/5, 4.5/5, 0/5, 5/5)
percent_HW <- "empty"
if(length(HWpoints)>4) percent_HW <- 25*sum(sort(HWpoints, decreasing = TRUE)[1:3])/3
percent_HW
HWpoints <- c(5/5, 5/5, 4.85/4.85, 4.6/5, 4.7/5) # Enter a vector of five or six elements here: Five elements if you opt not to attempt the sixth, or six elements if you do attempt it.  Each element needs to be expressed as a proportion of points earned out of all points attempted on a given assignment. If you received a 0 on any of the first five assignments, enter this score as a 0; do not omit it.  Do not enter a score for the final if you do not attempt it. Example: if you earned 3.25, 4, 5, 4.5, 0, and 5 points on six homework assignments, enter c(3.25/5, 4/5, 5/5, 4.5/5, 0/5, 5/5)
percent_HW <- "empty"
if(length(HWpoints)>4) percent_HW <- 25*sum(sort(HWpoints, decreasing = TRUE)[1:3])/3
percent_HW
LPpoints <- c(5/5, 5/5, 5/5, 5/5, 5/5, 5/5, 5/5) # Enter a vector of seven or eight elements here: seven elements if you opt not to attempt Lab Report 7, or eight elements if you do attempt it. Each element needs to be expressed as a proportion of points earned out of all points attempted on a given assignment. If you received a 0 on any of the first seven assignments, enter this score as a 0; do not omit it.  Do not enter a score for the final if you do not attempt it. Example: if you earned 0, 5, 5, 5, 0, 5, 5, and 5 points on eight homework assignments, enter c(0/5, 5/5, 5/5, 5/5, 0/5, 5/5, 5/5, 5/5)
percent_LP <- "empty"
if(length(LPpoints)>6) percent_LP <- 155*sum(sort(HWpoints, decreasing = TRUE)[1:6])/6
percent_LP
LPpoints <- c(5/5, 5/5, 5/5, 5/5, 5/5, 5/5, 5/5) # Enter a vector of seven or eight elements here: seven elements if you opt not to attempt Lab Report 7, or eight elements if you do attempt it. Each element needs to be expressed as a proportion of points earned out of all points attempted on a given assignment. If you received a 0 on any of the first seven assignments, enter this score as a 0; do not omit it.  Do not enter a score for the final if you do not attempt it. Example: if you earned 0, 5, 5, 5, 0, 5, 5, and 5 points on eight homework assignments, enter c(0/5, 5/5, 5/5, 5/5, 0/5, 5/5, 5/5, 5/5)
percent_LP <- "empty"
if(length(LPpoints)>6) percent_LP <- 155*sum(sort(HWpoints, decreasing = TRUE)[1:7])/7
percent_LP
LPpoints <- c(5/5, 5/5, 5/5, 5/5, 5/5, 5/5, 5/5) # Enter a vector of seven or eight elements here: seven elements if you opt not to attempt Lab Report 7, or eight elements if you do attempt it. Each element needs to be expressed as a proportion of points earned out of all points attempted on a given assignment. If you received a 0 on any of the first seven assignments, enter this score as a 0; do not omit it.  Do not enter a score for the final if you do not attempt it. Example: if you earned 0, 5, 5, 5, 0, 5, 5, and 5 points on eight homework assignments, enter c(0/5, 5/5, 5/5, 5/5, 0/5, 5/5, 5/5, 5/5)
percent_LP <- "empty"
if(length(LPpoints)>6) percent_LP <- 15*sum(sort(LPpoints, decreasing = TRUE)[1:6])/6
percent_LP
GP <- "empty"
if (percent_Total == "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
percent_Total <- "empty"
if (
class(percent_QE)=="numeric" &
class(percent_HW)=="numeric" &
class(percent_LP)=="numeric"
){
percent_Total <- percent_QE+percent_HW+percent_LP+ifelse(
test = length(percent_EC)==1,
yes = percent_EC,
no = 0
)
}
percent_EC <- c() # If you successfully complete this assignment, enter c(1). Otherwise, do not change this chunk.
percent_Total <- "empty"
if (
class(percent_QE)=="numeric" &
class(percent_HW)=="numeric" &
class(percent_LP)=="numeric"
){
percent_Total <- percent_QE+percent_HW+percent_LP+ifelse(
test = length(percent_EC)==1,
yes = percent_EC,
no = 0
)
}
GP <- "empty"
if (percent_Total == "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
GP
HWpoints <- c(5/5, 5/5, 4.85/5, 4.6/5, 4.7/5) # Enter a vector of five or six elements here: Five elements if you opt not to attempt the sixth, or six elements if you do attempt it.  Each element needs to be expressed as a proportion of points earned out of all points attempted on a given assignment. If you received a 0 on any of the first five assignments, enter this score as a 0; do not omit it.  Do not enter a score for the final if you do not attempt it. Example: if you earned 3.25, 4, 5, 4.5, 0, and 5 points on six homework assignments, enter c(3.25/5, 4/5, 5/5, 4.5/5, 0/5, 5/5)
percent_HW <- "empty"
if(length(HWpoints)>4) percent_HW <- 25*sum(sort(HWpoints, decreasing = TRUE)[1:3])/3
percent_HW
GP <- "empty"
if (percent_Total == "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
GP
GP <- "empty"
if (percent_Total == "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
GP <- ceiling(x = 97.5*10)/10
GP <- "empty"
if (percent_Total == "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
GP <- ceiling(x = 97.5*10)/10
GP
GP <- "empty"
if (percent_Total == "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
GP <- ceiling(x = 99.75*10)/10
GP
GP <- "empty"
if (percent_Total == "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
GP
GP <- "empty"
if (percent_Total == "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(GP*10)/10
}
GP
GP <- "empty"
if (percent_Total != "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
GP
percent_Total <- 99.75
GP <- "empty"
if (percent_Total != "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
GP
percent_Total <- 99.75
GP <- "empty"
if (percent_Total == numeric){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
percent_Total <- 99.75
GP <- "empty"
if (percent_Total == "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
GP
percent_Total <- 99.75
GP <- "empty"
if (percent_Total != "numeric"){
if(percent_Total<10) GP <- 0
if(percent_Total>=10&percent_Total<20) GP <- 0.08*(percent_Total-10)
if(percent_Total>=20&percent_Total<90) GP <- 0.8 + 0.04*(percent_Total-20)
if(percent_Total>=90&percent_Total<98) GP <- 3.6 + 0.05*(percent_Total-90)
if(percent_Total>=98) GP <- 4
GP <- ceiling(x = GP*10)/10
}
GP
QEpoints <- c(19/19, 23/23) # Enter a vector of two or three elements here: two elements if you opt not to attempt the final, or three elements if you do attempt it. Each element needs to be expressed as a proportion of points earned out of all points attempted on a given assignment. Do not enter a score for the final if you do not attempt it. Example: if you earned 17 points on the first quiz and 20 on the second quiz but do not attempt the final, enter c(17/19, 20/23)
percent_QE <- "empty"
if(length(QEpoints)==2) percent_QE <- 60*sum(QEpoints)/2
if(length(QEpoints)==3) percent_QE <- 60*(sum(QEpoints[1:2])+2*QEpoints[3])/4
percent_QE
library("dplyr")
library(tidyverse)
data_2016 <- read.csv("Data/data_2016.csv", stringsAsFactors = FALSE)
data_2018 <- read.csv("Data/data_2018.csv", stringsAsFactors = FALSE)
data_dictonary <- read.csv("Data/data_dictionary.csv", stringsAsFactors = FALSE)
# dataframe with all target columns
data_2016_target <- data_2016 %>%
select(YEAR, STATEFIP, AGE, SEX, RACE, VOREG, VOREGHOW, VOYNOTREG, VOTED, VOTEHOW, VOWHYNOT)
data_dictonary <- data_dictonary %>%
select(-meta)
# specify the race label
data_dictonary_state <- data_dictonary[3:77, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_state, by=c("STATEFIP" = "value"))
# specify the race label
data_dictonary_race <- data_dictonary[94:122, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_race, by=c("RACE" = "value"))
# specify the sex label
data_dictonary_sex <- data_dictonary[90:92, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_sex, by=c("SEX" = "value"))
# specify the voreg label
data_dictonary_voreg <- data_dictonary[278:283, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_voreg, by=c("VOREG" = "value"))
# specify the voreghow label
data_dictonary_voreghow <- data_dictonary[257:269, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_voreghow, by=c("VOREGHOW" = "value"))
# specify the VOYNOTREG label
data_dictonary_voynotreg <- data_dictonary[229:241, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_voynotreg, by=c("VOYNOTREG" = "value"))
# specify the VOTED label
data_dictonary_voted <- data_dictonary[271:276, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_voted, by=c("VOTED" = "value"))
# specify the VOTEHOW label
data_dictonary_votehow <- data_dictonary[243:248, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_votehow, by=c("VOTEHOW" = "value"))
# specify the VOWHYNOT label
data_dictonary_vowhynot <- data_dictonary[213:227, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_vowhynot, by=c("VOWHYNOT" = "value"))
data_2016_target <- data_2016_target %>%
select(-c(STATEFIP, SEX, RACE, VOREG, VOREGHOW, VOYNOTREG, VOTED, VOTEHOW, VOWHYNOT))
colnames(data_2016_target) <-
c("year", "age", "state", "race", "sex", "voreg", "voreghow", "voynotreg", "voted", "votehow", "vowhynot")
colnames(data_2016_target)
head(data_2016_target)
### Research Questions:
# 1. Compare the voting participation percentage across different races with the entire race
#    percentage across the nation. (variable: race, ages, year; mutate percent_"race")
# mutate percent for each race (length(RACE == "race") / length(data_2016_race))
# then group by race
# join the dataset with population in each race in terms of total population
data_2016_race <- data_2016_target %>%
select(YEAR, AGE, SEX, RACE)
# 2. Analyzing the relatively more common reasons for people
#   who are in the least-participated races to not vote (Var: VOWHYNOT, VOYNOTREG)
# 3. Analyzing the voting methods preferences across (ages, races)
library("dplyr")
library(tidyverse)
data_2016 <- read.csv("Data/data_2016.csv", stringsAsFactors = FALSE)
data_2018 <- read.csv("Data/data_2018.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/Fall-Data-Challenge-2020")
library("dplyr")
library(tidyverse)
data_2016 <- read.csv("Data/data_2016.csv", stringsAsFactors = FALSE)
data_2018 <- read.csv("Data/data_2018.csv", stringsAsFactors = FALSE)
data_dictonary <- read.csv("Data/data_dictionary.csv", stringsAsFactors = FALSE)
# dataframe with all target columns
data_2016_target <- data_2016 %>%
select(YEAR, STATEFIP, AGE, SEX, RACE, VOREG, VOREGHOW, VOYNOTREG, VOTED, VOTEHOW, VOWHYNOT)
data_dictonary <- data_dictonary %>%
select(-meta)
# specify the race label
data_dictonary_state <- data_dictonary[3:77, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_state, by=c("STATEFIP" = "value"))
# specify the race label
data_dictonary_race <- data_dictonary[94:122, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_race, by=c("RACE" = "value"))
# specify the sex label
data_dictonary_sex <- data_dictonary[90:92, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_sex, by=c("SEX" = "value"))
# specify the voreg label
data_dictonary_voreg <- data_dictonary[278:283, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_voreg, by=c("VOREG" = "value"))
# specify the voreghow label
data_dictonary_voreghow <- data_dictonary[257:269, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_voreghow, by=c("VOREGHOW" = "value"))
# specify the VOYNOTREG label
data_dictonary_voynotreg <- data_dictonary[229:241, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_voynotreg, by=c("VOYNOTREG" = "value"))
# specify the VOTED label
data_dictonary_voted <- data_dictonary[271:276, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_voted, by=c("VOTED" = "value"))
# specify the VOTEHOW label
data_dictonary_votehow <- data_dictonary[243:248, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_votehow, by=c("VOTEHOW" = "value"))
# specify the VOWHYNOT label
data_dictonary_vowhynot <- data_dictonary[213:227, ] %>%
select(value, label)
data_2016_target <- data_2016_target %>%
left_join(data_dictonary_vowhynot, by=c("VOWHYNOT" = "value"))
data_2016_target <- data_2016_target %>%
select(-c(STATEFIP, SEX, RACE, VOREG, VOREGHOW, VOYNOTREG, VOTED, VOTEHOW, VOWHYNOT))
colnames(data_2016_target) <-
c("year", "age", "state", "race", "sex", "voreg", "voreghow", "voynotreg", "voted", "votehow", "vowhynot")
colnames(data_2016_target)
head(data_2016_target)
### Research Questions:
# 1. Compare the voting participation percentage across different races with the entire race
#    percentage across the nation. (variable: race, ages, year; mutate percent_"race")
# mutate percent for each race (length(RACE == "race") / length(data_2016_race))
# then group by race
# join the dataset with population in each race in terms of total population
data_2016_race <- data_2016_target %>%
select(YEAR, AGE, SEX, RACE)
### Research Questions:
# 1. Compare the voting participation percentage across different races with the entire race
#    percentage across the nation. (variable: race, ages, year; mutate percent_"race")
# mutate percent for each race (length(RACE == "race") / length(data_2016_race))
# then group by race
# join the dataset with population in each race in terms of total population
data_2016_race <- data_2016_target %>%
select(YEAR, AGE, SEX, RACE)
### Research Questions:
# 1. Compare the voting participation percentage across different races with the entire race
#    percentage across the nation. (variable: race, ages, year; mutate percent_"race")
# mutate percent for each race (length(RACE == "race") / length(data_2016_race))
# then group by race
# join the dataset with population in each race in terms of total population
data_2016_race <- data_2016_target %>%
select(year, age, sex, race)
View(data_2016_target)
# count the total pop by race
race_class <- data_2016_target %>%
group_by(race) %>%
summarize(
total_num = n()
)
View(race_class)
# count the pop reg for vote by race
reg_race_class <- data_2016_target %>%
filter(voreg = "Registered") %>%
group_by(race) %>%
summarize(
total_num = n()
)
# count the pop reg for vote by race
reg_race_class <- data_2016_target %>%
filter(voreg == "Registered") %>%
group_by(race) %>%
summarize(
total_num = n()
)
View(reg_race_class)
# count the pop reg for vote by race
reg_race_class <- data_2016_target %>%
group_by(race) %>%
filter(voreg == "Registered") %>%
summarize(
total_num = n()
)
# count the pop reg for vote by race
reg_race_class <- data_2016_target %>%
group_by(race) %>%
filter(voreg == "Registered") %>%
summarize(
total_num = n()
)
View(reg_race_class)
View(race_class)
View(race_class)
# count the pop voted by race
voted_race_class <- data_2016_target %>%
group_by(race) %>%
filter(voted == "Voted") %>%
summarize(
total_num = n()
)
View(voted_race_class)
# calculate the percentage of voted pop in total pop by race
voted_percent_total <- race_class %>%
left_join(voted_race_class, by="race")
View(voted_percent_total)
# count the total pop by race
race_class <- data_2016_target %>%
group_by(race) %>%
summarize(
total_num = n()
)
# count the pop reg for vote by race
# (for those who did not vote in the most recent election)
reg_race_class <- data_2016_target %>%
group_by(race) %>%
filter(voreg == "Registered") %>%
summarize(
total_num = n()
)
# count the pop voted by race
#  (for those who were registered)
voted_race_class <- data_2016_target %>%
group_by(race) %>%
filter(voted == "Voted") %>%
summarize(
voted_num = n()
)
# calculate the percentage of voted pop in total pop by race
voted_percent_total <- race_class %>%
left_join(voted_race_class, by="race")
# calculate the percentage of voted pop in total pop by race
voted_percent_total <- race_class %>%
left_join(voted_race_class, by="race") %>%
summarize(voted_percent = voted_num / total_num)
# calculate the percentage of voted pop in total pop by race
voted_percent_total <- race_class %>%
left_join(voted_race_class, by="race") %>%
mutate(
voted_percent = voted_num / total_num
)
# count the pop reg for vote by race
# (for those who did not vote in the most recent election)
reg_race_class <- data_2016_target %>%
group_by(race) %>%
filter(voreg == "Registered") %>%
summarize(
reg_num = n()
)
# calculate the percentage of registerted pop grouped by race
reg_percent_total <- race_class %>%
left_join(reg_race_class, by="race") %>%
mutate(
reg_percent = reg_num / total_num
)
View(reg_percent_total)
